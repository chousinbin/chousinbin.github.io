[{"content":" 作业：30 分\n上机：30 分\n考试：20 分\n学习报告：20 分（笔记）\n1 测试理论 1.1 测试角度 功能测试 界面测试 易用性测试 性能测试 安全性测试 1.2 测试用例 测试用例是可以独立进行测试执行的最小单元； 软件测试是将软件测试活动转换为标准文档； 测试用例基本内容 前置条件 测试数据 测试环境 测试步骤 期望结果 重要性 软件测试是有组织性、步骤性和计划性的； 测试用例是测试工作的指导， 测试用例质量 有效性 可复用性 易组织性 客观性 可评估和可管理性 知识传递 1.3 用例设计方法 等价类划分法 定义 等价类是某个输入域的子集，在该子集中每个输入数据的作用是等效的； 将输入数据分成若干个等价类，从每个等价类选取一个代表性的数据作为测试用例； 等价类分为有效等价类和无效等价类。 划分 MECE：相互独立，完全穷尽； 识别全集。 边界类分析法 如果输入条件规定了值的范围，则应取港大道这个范围的边界的值，以及刚刚超过这个范围边界的值作为测试输入数据； 如果规定了值的个数，租用最大个数、最小个数、比最小个数少一、比最大个数多以的数作为测试数据。 1.4 软件缺陷 Bug\n严重性：衡量缺陷对客户满意度的影响程度\n优先级：指缺陷被修复的紧急程度\n生命周期 graph TD 发现 --\u003e 打开 --\u003e 修复 --\u003e 关闭 1.5 软件测试 软件测试是伴随开发过程的全过程的，开发人员开发的同时还要书写测试代码。\n动态测试：动态测试是在程序运行时执行的测试方法，它通过实际运行软件并输入测试数据来评估软件的行为； 静态分析：静态分析是在软件代码的静态状态下进行的一种测试方法，它不需要实际执行程序。 软件测试的层次 单元测试 集成测试 系统测试：系统测试分为功能测试和非功能测试。 验收测试：在实际客户环境中与客户同时测试。 白盒测试 语句覆盖：测试用例要覆盖所有代码； 判定覆盖：每个判定的分支至少被执行一次； 条件覆盖：每个判定的每个可能结果至少被执行一次。 非功能测试 性能 安全性 稳定性 兼容性 1.6 需求定义 业务需求 业务需求是对组织或企业在特定项目或业务活动中要达成的目标和满足的需求，通常由高层管理人员或业务分析师定义，并着重于解决问题、实现目标以及适应市场需求的方向。\n如：快递公司通过快递柜引导用户自助揽件\n用户需求 用户需求则是从最终用户的角度出发，描述了用户对软件系统的期望和要求，包括对系统功能、性能、易用性等方面的期望。\n如：用户通过快递柜自助发件\n功能需求 功能需求是用户需求的具体化，它们描述了系统需要具备的功能和特性，以及用户希望系统如何响应和行为，是开发团队基于用户需求而定义的，用于指导软件开发、测试和交付的具体规范\n如：快递柜能自助发件\n2 用例跟踪 自动化测试平台通常提供了用例创建和用例评审的功能，让团队可以更有效地管理测试用例并确保其质量。\n2.1 用例创建 新建用例： 在自动化测试平台上，通常有一个界面或者功能可以创建新的测试用例。用户可以点击相应的按钮或链接，进入到创建用例的界面。 填写用例信息： 在创建用例的界面，用户需要填写一些基本信息，例如用例标题、描述、前置条件、步骤、预期结果等。 添加步骤： 用户需要逐步描述测试用例的执行步骤。每个步骤通常包括一个操作（例如点击按钮、输入文本等）和一个预期结果。 保存用例： 完成用例信息和步骤的填写后，用户可以保存用例并返回到用例列表界面。 管理用例： 在用例列表界面，用户可以对已创建的用例进行管理，包括编辑、复制、删除等操作。 2.2 用例评审 选择用例进行评审： 通常由项目经理或者质量保障团队负责发起用例评审。他们会选择一些待评审的用例，并将其分配给相关的团队成员。 评审用例内容： 团队成员会在自动化测试平台上查看待评审的用例，并针对其中的描述、步骤、预期结果等内容进行评审。他们可能会提出修改建议、指出遗漏或错误的地方。 讨论和修改： 在评审过程中，团队成员之间可能会进行讨论，讨论用例的实现细节、覆盖范围等。根据讨论结果，可能需要对用例进行修改或者补充。 确认评审结果： 一旦评审完成，项目经理或质量保障团队会确认评审结果，并将修改后的用例状态更新为已评审或者待执行。 3 UI 测试 2024年4月11日 上机\nUI 测试是验证用户界面的外观和行为是否符合设计要求，以及是否易于使用和导航；\nUI 测试是自动化测试平台对一个功能或一组操作进行模拟人工执行的过程，能自动检测并记录每个步骤执行情况。\n流程主要包括：创建场景、添加步骤、设定步骤、添加元素、设定参数等。\n核心内容体现在两个方面：添加元素与为元素分配操作。\n3.1 添加元素步骤 浏览器访问元素所在页面； 右键单击目标元素，在弹出的菜单中左键单击检查； 鼠标光标在弹出的开发者工具栏中移动，直到目标元素显示被框起来，表示所指代码块为目标元素的代码块； 右键单击代码块，复制该元素的 XPath； 返回 MeterSphere 平台按照 XPath 添加元素到元素库。 XPath: 在Web开发中，XPath通常用于定位和操作HTML文档中的元素，特别是在自动化测试和网络爬虫等场景下，XPath被广泛用于定位和操作Web页面中的元素。通过XPath，开发人员可以准确地定位页面中的元素，从而实现对页面的自动化操作和数据提取。\n3.2 UI 测试步骤 创建一个场景； 根据场景操作流程添加不同的步骤； 为每个步骤配置操作元素； 最后保存并执行； 在 “测试报告” 检查执行情况。 3.3 Web 元素动态 ID 在进行 ”发布文章“ 的 UI 测试时，其中一个步骤是在弹窗中的标题输入框中输入标题，几次执行测试，均卡在此处报 Error\n1 xpected condition failed: waiting for presence of element located by: By.xpath: //*[@id=\u0026#34;input_109\u0026#34;] (tried for 15 second(s) with 500 milliseconds interval) 经过手动 Debug 发现此输入框的 ID 是动态的，所以 XPath 失效，导致报以上信息。\n1 2 3 \u0026lt;input class=\u0026#34;formkit-input bg-white resize-none w-full text-black block transition-all h-full px-3 text-sm\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;input_38\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;formkit-input bg-white resize-none w-full text-black block transition-all h-full px-3 text-sm\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;input_48\u0026#34;\u0026gt; 知道了问题所在，找到输入框元素源代码如下：\n1 \u0026lt;input class=\u0026#34;formkit-input bg-white resize-none w-full text-black block transition-all h-full px-3 text-sm\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;input_48\u0026#34;\u0026gt; 解决方法是修改元素库中标题输入框信息，将匹配模式从 XPath 改为 className ，匹配值为 formkit-input 。\n4 接口测试 在界面未开发之前，可以通过接口测试来验证功能。\nswagger\n4.1 概念介绍 接口 接口是指外部系统与系统之间以及内部各子系统之间的交互点。\n包括外部接口、内部接口，内部接口又包括：上层服务与下层服务接口、同级接口。\ngraph LR 应用层 --- 接口 --- 后台 JSON JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它基于 JavaScript 的语法，但已成为独立于编程语言的通用数据格式。JSON 易于阅读和编写，也易于机器解析和生成。它主要由两种结构构成：\n键值对（Key-Value Pairs）：JSON 的基本元素是键值对，其中键是字符串，值可以是任意有效的 JSON 数据类型，如字符串、数字、布尔值、数组、对象等。键值对使用冒号（:）分隔键和值，多个键值对之间使用逗号（,）分隔。\n数据类型：JSON 支持多种数据类型，包括字符串、数字、布尔值、数组、对象、null。这些数据类型可以嵌套组合，形成复杂的数据结构。\nJSON 的优点包括易于阅读、易于编写、易于解析、与多种编程语言兼容等。它在 Web 开发、API 设计、配置文件等领域广泛应用。例如，在 Web 开发中，常用 JSON 作为前后端数据交换的格式；在 API 设计中，常用 JSON 作为 API 接口的数据传输格式。\nHTTP HTTP（Hypertext Transfer Protocol）是一种用于传输超文本数据的协议，它是Web上数据传输的基础。HTTP通过客户端和服务器之间的请求-响应模型来传输数据，通常使用TCP协议作为传输层协议。HTTP是无状态的，即服务器不会保存客户端的状态信息，每个请求都是独立的，这样可以简化服务器的设计和实现。\nHTTPS HTTPS（Hypertext Transfer Protocol Secure）是HTTP的安全版本，它通过在HTTP和TCP之间加入SSL/TLS协议来提供数据传输的安全性和加密性。HTTPS在HTTP的基础上添加了SSL/TLS的加密和身份验证机制，从而确保数据在传输过程中的机密性、完整性和可信度。HTTPS常用于安全敏感的网站，如电子商务网站、银行网站等。\nHTTP 请求方法 GET - 请求指定的资源。GET请求应该只用于获取数据，不应有副作用，即它们是安全且幂等的。 POST - 用于提交数据给服务器。例如，提交表单或上传文件。POST请求不是幂等的，意味着多次执行相同的POST请求可能会有不同的结果。 PUT - 从客户端向服务器传送的数据取代指定的文档的内容。PUT方法是幂等的，意味着无论进行多少次同样的请求，结果都是一样的。 DELETE - 请求服务器删除指定的页面。如果成功，可能返回200 (OK) 或 204 (No Content)。DELETE方法也是幂等的。 HEAD - 类似于GET方法，但没有响应体，用于获取报头。 OPTIONS - 用于描述目标资源的通信选项。 PATCH - 用于对资源应用部分修改。与PUT不同，PATCH通常不是幂等的，意味着多次相同的PATCH请求可能产生不同的结果。 TRACE - 回显服务器收到的请求，主要用于测试或诊断。 CONNECT - 将连接转换到透明的TCP/IP隧道，通常用于SSL加密服务器的链接（通过代理服务器）。 HTTP 状态码 1xx（信息性状态码） - 代表请求已被接受，继续处理。 2xx（成功状态码） - 代表请求已成功被服务器接收、理解、并接受。 3xx（重定向状态码） - 代表需要后续操作以完成请求。 4xx（客户端错误状态码） - 代表请求包含语法错误或无法被执行。 5xx（服务器错误状态码） - 代表服务器在处理请求的过程中发生了错误。 常见的HTTP状态码： 200 OK - 请求成功。 301 Moved Permanently - 请求的网页已永久移动到新位置。 302 Found - 临时重定向。 400 Bad Request - 服务器不理解请求的语法。 401 Unauthorized - 请求要求身份验证。 403 Forbidden - 服务器拒绝请求。 404 Not Found - 服务器找不到请求的网页。 500 Internal Server Error - 服务器内部错误，无法完成请求。 503 Service Unavailable - 服务器目前无法使用（由于超载或停机维护）。 SSL SSL（Secure Sockets Layer）是一种安全传输层协议，它位于TCP/IP协议之上，为数据通信提供了安全和加密保障。SSL最初由网景公司开发，后来被TLS（Transport Layer Security）所取代。TLS是SSL的升级版本，目前广泛应用于互联网上的安全通信。SSL/TLS通过使用公钥加密技术、证书验证和对称加密等手段来确保通信的安全性。\n域名 域名是 IP 地址的别名，由于 IP 地址是四段 0 - 255 的数字，不容易被人们记忆，所以出现了域名帮助记忆。\nDNS DNS (Domain Name System) 域名系统，DNS 服务器用于解析域名对应的 IP 地址。它是域名和 IP 地址相互映射的分布式数据库，这些 DNS 服务器分布在全球各地，为互联网用户提供域名解析服务。\n为什么需要 DNS 呢？因为本地电脑并不知道你输入的一个域名指向哪个 IP 地址，需要向 DNS 服务器发起询问，得到对应的 IP 地址。\n互联网服务提供者购买完域名之后，需要先将域名和自己服务的 IP 地址的映射信息交给 DNS 机构，这样别人才可以得到解析。\nDNS 域名空间 根域、顶级域名、二级域名、三级域名 \u0026hellip;\n根域：用 . 表示，位于域命名空间层次结构的最高层，全球分布着 13 台根域名服务器。保存其下层的顶级域的 DNS 服务器名称和 IP 地址的对应关系； 顶级域名：可分为组织域 (.com, .net, org, .gov, .edu \u0026hellip;) 和国家域 (.cn, .jp, .me, .in) 二级域名：二级域位于顶级域下层，是指为了在 Internet 上使用而注册到个人或企事业单位的域名，如 google.com; 子域：子域是根据具体情况从二级域中按部门或地理位置创建。 DNS 解析过程 graph TD; 用户在浏览器输入www.google.com --\u003e 浏览器检查浏览器缓存中是否有该域名解析IP地址; 浏览器检查浏览器缓存中是否有该域名解析IP地址 --有--- 完成解析并返回; 浏览器检查浏览器缓存中是否有该域名解析IP地址 --无--- 检查电脑本地DNS解析器缓存; 检查电脑本地DNS解析器缓存 --有--- 完成解析并返回; 检查电脑本地DNS解析器缓存 --无--- 检查本地hosts文件; 检查本地hosts文件 --有--- 完成解析并返回; 检查本地hosts文件 --无--- 访问DNS服务器; 访问DNS服务器　--有--- 完成解析并返回; 访问DNS服务器　--无--- 域名不存在访问失败; CND CDN（Content Delivery Network）内容分发网络是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n简而言之，通过分布式的多地部署服务器，提高服务覆盖率，使全世界用户都能接入更近的服务器，从而提高访问速度。\n4.2 接口定义 接口定义：接口定义是对API的详细描述,包括请求 URL 、请求方法、请求头、请求参数、响应结构等信息； 接口用例： 接口测试用例是基于接口定义而创建的,用于对 API 进行自动化测试。每个测试用例实际上就是针对特定场景设置不同的请求数据,并验证API的响应是否符合预期。一个接口定义可对应多个接口测试用例。 接口定义与接口测试用例关系 接口定义是测试用例的基础，为测试用例提供被测API的详细信息； 接口测试用例依赖于接口定义，但测试用例需要额外指定测试数据、断言条件等具体内容； 一个接口定义可以对应多个测试用例，用于覆盖不同的测试场景； 当接口定义发生变更时，相应的测试用例也需要更新。 单接口测试 单接口测试不仅测试正常数据情况，也会测试反例。\n请求参数 后置操作 后置操作是执行完当前测试用例对用例数据进行操作，常见的是提取此次执行结果的部分参数。提取方法有：\nJSONPath：可以便捷的从响应结果中提取参数； 脚本：包括beanshell, Python, groovy, JavaScript 等。 断言 断言的作用是检查响应数据是否满足特定的条件或规则，如果不满足，则认为该测试用例失败。\n常见的断言包括：\n响应断言：验证 HTTP 响应、响应头部分数据、响应体返回结果等是否正确； 数据断言：判断响应体某个字段与特定值之间的关系； 逻辑断言：组合使用多个断言条件，通过与或非等逻辑运算符构建复杂断言； 脚本断言：使用 JavaScript 或其他脚本语言编写更复杂的断言逻辑。 运行环境 域名 域名指定被测试的服务所在的主机地址。\n全局认证 全局认证是对整个测试运行环境中的所有接口请求的统一认证方式。\n4.3 接口自动化 接口自动化是将一系列多个接口组合到一起，执行一个功能的全过程测试。\n场景 场景与应用的特定功能相对应，场景是接口用例的集合，用于模拟特定的业务流程或功能。比如：删除文章、发布文章\u0026hellip; 这些功能或场景都需要多个接口用例结合执行测试。\n接口添加形式 接口自动化中，对接口有复制和引用两种添加形式。\n接口测试用例复制：在接口自动化中是独立出来的用例，两个互相隔离，在接口自动化中的修改不影响接口定义和其他地方； 接口测试用例引用：引用的用例不是独立的，在接口自动化中不能修改参数，测试用例的修改，会导致接口自动化中也改变。 为什么部分接口单接口调试失败？ 因为删除文章和发布文章的参数是一个变量，单个调试无法得到这个变量的值，需要依赖前面编写文章测试用例的提取这个参数。比如，删除文章和发布文章参数都有 ${name} 都依靠文章的 name , 需要在编写文章的后置操作中提取 name 参数，以便后续接口使用。\n由此可知，前面接口提取的参数可以被后续接口使用。\n5 性能测试 5.1 概念 不同视角的性能 终端用户 响应时间 开发人员 算法设计 结构设计 性能最佳实践 数据库相关 可测试性 运维人员 单个用户响应时间 大量用户并发访问负载 系统容量 系统瓶颈 数据库 稳定性 测试人员 系统级别的性能需求（外部） 准确定位根源（内部） 提出解决方案 什么是性能测试？ 真实环境下，用工具模拟软件运行操作，监控系统性能指标，分析结果。\n为什么进行性能测试？ 发现并解决问题，获取性能相关指标。\n性能测试流程 graph TD 确定测试需求 --\u003e 设计测试场景 --\u003e 利用测试工具 --\u003e 结果报告分析 --\u003e 性能优化再测试 明确性能测试需求 需求 + 经验\n用户体验\n商业需求\n技术需求\n标准要求\n指标清楚量化\n80/20 原则：二八原则，也称为帕累托法则，是指在许多情况下，大约80%的结果来自于大约20%的原因。这个原则最初由意大利经济学家维尔弗雷多·帕累托在19世纪提出，并被广泛应用于不同领域。\n2-5-10原则\u0026quot;是一个项目管理中的概念，它指的是在项目的不同阶段，问题的成本和解决难度会呈指数级增长。\n具体来说，这个原则表明：\n在项目规划阶段（阶段一），解决一个问题的成本最低，通常是2倍的成本。 这是因为在项目的早期阶段，问题通常较小且容易被发现和解决。此时，花费少量的资源来解决问题可以防止它们在后续阶段成为更大的障碍。 在项目设计阶段（阶段二），解决一个问题的成本会显著增加，通常是5倍的成本。 当项目进入设计阶段时，修改项目的方向或设计可能需要更多的工作，因为它们可能会涉及到重新设计系统或重新考虑项目的整体结构。 在项目实施阶段（阶段三），解决一个问题的成本将急剧上升，通常是10倍的成本。 一旦项目开始实施，修改项目的内容或结构可能需要大量的资源和时间，因为它可能会影响到已经开始实施的部分，甚至可能需要停止和重启一些工作。 性能指标 并发用户数 系统潜在用户数（系统现有 5000 个用户账号） 业务并发用户数（某高峰时段有 2500 人使用） 峰值并发用户数 （2500 人中有 1000 人请求服务） 响应时间 前端展现时间 系统响应时间 系统吞吐量 每秒请求数 每秒页面数 每秒字节数 单位时间业务处理数量 随着资源使用率升高，到性能瓶颈时，系统吞吐量变低，响应时间变长。\n5.2 平台概念 JMeter Apache JMeter 是一款开源的，Java 开发设计的压力和性能测试工具。它最初被用于 Web 测试，但后来扩展到其它测试领域。\nJMeter是一个功能强大的开源性能测试工具，用于模拟用户行为、测试应用程序的性能和负载情况。 它提供了丰富的功能和灵活的配置选项，可以支持多种协议和场景的测试。 JMeter主要通过脚本编写来定义测试场景和行为，然后通过JMeter的引擎执行这些脚本来模拟用户行为。 JMX 是 JMeter 软件的测试脚本文件类型。 与 MeterSphere 区别 MeterSphere 是一个开源的全生命周期的 DevOps 平台，提供了包括性能测试在内的多种功能，用于支持软件开发和交付过程中的自动化和持续集成。 MeterSphere 集成了JMeter作为其性能测试的核心引擎，用户可以在 MeterSphere 平台上通过图形化界面配置和运行 JMeter 测试，并且可以结合其他功能，如监控、报告等，实现全面的性能测试管理和分析。 ","permalink":"https://chousinbin.github.io/posts/24040701.html/","summary":"软件测试","title":"软件测试"},{"content":" 软工212 - 01 - 周新斌\n1 完善登录模块 等价类划分法 手机号 验证码 过期 协议 预期结果 合法 合法 未过期 勾选 登陆成功，进入主页 合法 合法 未过期 未勾选 登录按钮不可点击 合法 合法 过期 勾选 提示请重新获取验证码 合法 合法 过期 未勾选 登录按钮不可点击 合法 非法 未过期 勾选 提示账号或验证码错误 合法 非法 未过期 未勾选 登录按钮不可点击 合法 非法 过期 勾选 提示账号或验证码错误 合法 非法 过期 未勾选 登录按钮不可点击 小于 11 位 合法 未过期 勾选 提示手机格式不合法 小于 11 位 合法 未过期 未勾选 登录按钮不可点击 小于 11 位 合法 过期 勾选 提示账号或验证码错误 小于 11 位 合法 过期 未勾选 登录按钮不可点击 小于 11 位 非法 未过期 勾选 提示手机格式不合法 小于 11 位 非法 未过期 未勾选 登录按钮不可点击 小于 11 位 非法 过期 勾选 提示手机格式不合法 小于 11 位 非法 过期 未勾选 登录按钮不可点击 边界值分析法 手机位数 验证码位数 预期结果 10 3 非法 10 4 非法 10 5 非法 11 3 非法 11 4 合法 11 5 非法 12 3 非法 12 4 非法 12 5 非法 2 高级用户注册 条件定义 组成：只能由大写或小写英文字母、数字、点、减号、下划线组成； 长度：6 - 18 位； 开头：字母开头； 结尾：字母或数字结尾。 等价类划分法 用户名组成 用户名长度 开头情况 结尾情况 预期结果 用户名组成合法 长度 6 - 18 字母开头 数字或字母结尾 注册成功 用户名组成合法 长度 6 - 18 字母开头 非数字或字母结尾 注册失败 用户名组成合法 长度 6 - 18 非字母开头 数字或字母结尾 注册失败 用户名组成合法 长度 6 - 18 非字母开头 非数字或字母结尾 注册失败 用户名组成合法 长度非 6 - 18 字母开头 数字或字母结尾 注册失败 用户名组成合法 长度非 6 - 18 字母开头 非数字或字母结尾 注册失败 用户名组成合法 长度非 6 - 18 非字母开头 数字或字母结尾 注册失败 用户名组成合法 长度非 6 - 18 非字母开头 非数字或字母结尾 注册失败 用户名组成不合法 长度 6 - 18 字母开头 数字或字母结尾 注册失败 用户名组成不合法 长度 6 - 18 字母开头 非数字或字母结尾 注册失败 用户名组成不合法 长度 6 - 18 非字母开头 数字或字母结尾 注册失败 用户名组成不合法 长度 6 - 18 非字母开头 非数字或字母结尾 注册失败 用户名组成不合法 长度非 6 - 18 字母开头 数字或字母结尾 注册失败 用户名组成不合法 长度非 6 - 18 字母开头 非数字或字母结尾 注册失败 用户名组成不合法 长度非 6 - 18 非字母开头 数字或字母结尾 注册失败 用户名组成不合法 长度非 6 - 18 非字母开头 非数字或字母结尾 注册失败 边界值分析法 用户名组成 用户名开头 用户名结尾 用户名长度 预期结果 组成合法 开头合法 结尾合法 5 注册失败 组成合法 开头合法 结尾合法 6 注册成功 组成合法 开头合法 结尾合法 7 注册成功 组成合法 开头合法 结尾合法 17 注册成功 组成合法 开头合法 结尾合法 18 注册成功 组成合法 开头合法 结尾合法 19 注册失败 3 机票定价系统 判定表法 乘客国别 舱位类型 行李重量 是否需要付费 付费金额 国内乘客 头等舱 \u0026lt;= 30 KG 否 0 国内乘客 头等舱 \u0026gt; 30 KG 是 4 元 / KG 国内乘客 其他舱 \u0026lt;= 30 KG 否 0 国内乘客 其他舱 \u0026gt; 30 KG 是 6 元 / KG 外国乘客 头等舱 \u0026lt;= 30 KG 否 0 外国乘客 头等舱 \u0026gt; 30 KG 是 8 元 / KG 外国乘客 其他舱 \u0026lt;= 30 KG 否 外国乘客 其他舱 \u0026gt; 30 KG 是 12 元 / KG 残疾乘客 头等舱 \u0026lt;= 30 KG 否 0 残疾乘客 头等舱 \u0026gt; 30 KG 是 2 元 / KG 残疾乘客 其他舱 \u0026lt;= 30 KG 否 0 残疾乘客 其他舱 \u0026gt; 30 KG 是 3 元 / KG ","permalink":"https://chousinbin.github.io/posts/homework/%E4%BD%9C%E4%B8%9A3/","summary":"软工212 - 01 - 周新斌 1 完善登录模块 等价类划分法 手机号 验证码 过期 协议 预期结果 合法 合法 未过期 勾选 登陆成功，进入主页 合法 合法 未过期 未勾选 登录按钮","title":"作业3"},{"content":" 缺少发现美的眼睛。\n无论身处何处，在我们身边都会有美丽的风景，可以是日出与日落的一刻钟、可以是清新幽静的公园、可以是路边的一草一木\u0026hellip;\n可是，我们好像都很“忙”。\n在路上忙于奔波？无暇看路途的风景？\n在学校忙于学业？无时间出去走一走？\n其实，只要在路途中停一下，走慢一点，看向窗外，你会发现美景一直在，只要去看。\n景在路上，你看便是。\n忙忙忙 忙忙忙\n忙是为了自己的理想\n还是为了不让别人失望\n盲盲盲 盲盲盲\n盲的已经没有主张\n盲的已经失去方向\n忙忙忙 盲盲盲\n忙的分不清欢喜还是忧伤\n忙的没有时间痛哭整一场\n—— 李宗盛 \u0026amp; 张艾嘉 《忙与盲》\n","permalink":"https://chousinbin.github.io/posts/life/mang-yu-mang/","summary":"忙与盲","title":"忙与盲"},{"content":"登录模块用例 手机号字段 数字键盘用例 步骤 预期结果 点击手机号输入框 成功弹出数字键盘，只能输入数字 手机号小于 11 位用例 步骤 预期结果 输入手机号小于 11 位 验证码输入正确 协议同意勾选 点击登录按钮 提示”手机格式不合法“ 手机号大于 11 位用例 步骤 预期结果 手机号输入大于 11 位 大于 11 位的数字不显示 验证码字段 获取验证码模块用例 步骤 预期结果 输入正确的中国手机号 点击获取验证码 成功收到验证码，按钮内容变为 60s 倒数 60s 后再次获取验证码 冷却结束恢复可点击状态 验证码位数限制用例 步骤 预期结果 输入正确的中国手机号 点击获取验证码 得到验证码，获取验证码开始冷却 输入验证码大于 4 位 只能输入前四位，之后的位数输入不进去，在验证码输入框也不显示 协议选择按钮用例 步骤 预期结果 单击协议勾选按钮 成功选中 再次单击协议勾选按钮 成功取消选中 登录按钮用例 成功登录用例 步骤 预期结果 手机号输入正确 获取验证码 成功获取 验证码输入 验证码输入正确 勾选协议 协议勾选成功 点击登录 可以点击，成功进入主页 异常情况用例 步骤 预期结果 手机号已输入 验证码已输入 协议未勾选 点击登录 登录按钮置灰不可点击 步骤 预期结果 手机号已输入 验证码未输入 协议已勾选 点击登录 登录按钮置灰不可点击 步骤 预期结果 手机号未输入 验证码已输入 协议已勾选 点击登录 登录按钮置灰不可点击 步骤 预期结果 手机号输入正确 验证码输入错误 协议已勾选 点击登录 提示“账号或验证码错误” 验证码有效期用例 步骤 预期结果 手机号输入正确 验证码输入正确 协议已勾选 验证码获取 10 分钟后点击登录 提示“请重新获取验证码” ","permalink":"https://chousinbin.github.io/posts/homework/%E4%B8%8A%E6%9C%BA2/","summary":"登录模块用例 手机号字段 数字键盘用例 步骤 预期结果 点击手机号输入框 成功弹出数字键盘，只能输入数字 手机号小于 11 位用例 步骤 预期结果 输入手机号小于 11 位","title":"上机2"},{"content":"Git $everything\\ is\\ local$\n一、Git概述 Git是一个免费的、开源的分布式版本控制系统，可以快速高效的处理从小型到大型的各种项目。\nGit易于学习， 占用空间小，性能快如闪电。它优于 SCM 工具，如 Subversion、CVS、Perforce 和 ClearCase，具有廉价的本地分支、方便的暂存区域和多个工作流等功能。\n1.1Git历史 Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。\n(摘录于廖雪峰官网Linux教程)\n1.2版本控制 团队开发需要记录项目版本以及正确的版本控制，Git版本控制软件由此而来。\n1.3版本控制工具 集中式版本控制工具 CVS、SVN（subversion）、VSS\u0026hellip;\u0026hellip;\n集中化的版本控制系统诸如CVS、SVN等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。\n优点是每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。\n缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，准都无法提交更新，也就无法协同工作。\n分布式版本控制工具 Git、Mercurial、Bazaar、Darcs\u0026hellip;\u0026hellip;\n像Git这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。\n分布式的版本控制系统出现之后，解决了集中式版本控制系统的缺陷：\n服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的） 每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全） 1.4Git工作机制 只有把代码提交到本地库，才会产生历史版本。\n本地库→git push→远程库\n1.5代码托管平台 代码托管中心是基于网络服务器的远程代码仓库，一般称为远程库。\n局域网：Gitlab\n互联网：Github、Gitee码云\n二、Git安装 Git官网：https://git-scm.com/\n默认选项安装\n查看Git版本\n1 2 3 ChouS@DESKTOP-78VSLED MINGW64 ~ $ git --version git version 2.37.0.windows.1 三、Git常用命令 大部分命令与Linux通用。\n命令名称 作用 git config \u0026ndash;global user.name 用户名 设置用户签名 git config \u0026ndash;global user.email 邮箱 设置用户签名 git init 初始化本地库 git status 查看本地库状态 git add 文件名 添加到暂存区 git rm \u0026ndash;cached 文件名 从暂存区删除 git commit -m \u0026ldquo;版本信息\u0026rdquo; 文件名 提交到本地库 git reflog 查看历史纪录 git reset \u0026ndash;hard 版本号 版本穿梭 git log 查看当前版本详细日志 3.1用户签名 设置用户签名 1 2 git config --global user.name 用户签名 git config --global user.email 用户邮箱 查看用户签名 注意：\n签名的作用是区分不同操作者的身份。用户签名信息在每一个版本的提交信息中能够看到，以此确定本次提交的谁做的。 Git首次安装必须设置一下用户签名，否则无法提交代码。 这里设置的用户签名的用户名和邮箱与将来登录代码托管平台的账号没有任何关系。 3.2初始化本地库 1 git init 在项目根文件夹中右键选择git bush ，输入上命令，完成初始化本地库。\n3.3查看本地库状态 1 git status 红名文件说明是改动的文件，未被添加到暂存区。\n绿名文件，说明该文件状态已经从工作区add到暂存区，说明Git追踪到了该文件。\n3.4添加到暂存区 添加到暂存区 1 git add 文件名 批量添加到暂存区 添加多个文件，文件之间以空格隔开\n1 git add file1 file2 file3 添加指定文件夹下的文件或者指定文件夹下指定格式文件\n1 2 git add 算法/* //把算法文件夹下的全部文件添加到暂存区 git add 算法/*.md //把算法文件夹下.md格式的文件添加到暂存区 添加所有文件\n1 2 git add . git add --all 从暂存区删除 添加到暂存区还不会被版本控制记录，可以进行从暂存区删除命令。\n1 git rm --cached 文件名 这个删除只是从暂存区删除，不会删除工作区的源文件。\n3.5提交到本地库 1 git commit -m \u0026#34;版本信息\u0026#34; 文件名 执行该命令后，把暂存区的文件提交到本地库。此时，文件被版本控制记录。\n3.6查看历史日志 1 git reflog 显示当前项目的所有历史版本，以及对应版本的版本号前七位（如本数据c16588d）。\n3.7查看详细历史日志 1 2 3 4 5 6 7 ChouS@DESKTOP-78VSLED MINGW64 /e/Github/Notes (master) $ git log commit b2325b3a938da90867449087ef4abfaaf2b96637 (HEAD -\u0026gt; master, notes/master) Author: SinbinChou \u0026lt;chousinbin@163.com\u0026gt; Date: Wed Jul 20 21:57:31 2022 +0800 2022-07-20 显示当前项目当前版本的详细日志信息。比如：完整的版本号、提交者的签名、提交时间、版本名等。\n3.8修改文件 修改文件 修改newfile文件第一行尾添加了222。\n修改后的状态 再次查看状态，我们发现有提示modified:文件名，这种状态说明此文件被修改过了。\n另外这个提示是红色字体，所以这个修改的文件还没有被添加到暂存区，需要对此文件进行添加到暂存区。\n添加到暂存区后的状态 添加到暂存区后，再次查看状态，绿色状态表明：当前文件是被修改且添加到暂存区后未被提交到本地库的文件。\n提交到本地库 提交到本地库后返回操作者提交的版本信息、文件修改的数量、行数的插入数与删除数。\n我们明明是在一行的结尾添加了数字$2$，为什么返回的信息是一行插入和一行删除呢？\n因为Git是按照行来编辑的，在修改文件信息时，先删除当前行，再把修改后的信息插入到原来的位置。\n提交到本地库后的状态 世界恢复了原有的平静。\n虽然我们对此项目的一个文件可能进行多个版本的修改，但是本地源文件只有一个，版本控制由Git掌管。\n3.9版本穿梭 1 git reset --hard 版本号 先找到版本号（前7位就可以）\n选中要穿梭到的版本号，右击复制，执行版本穿梭命令。\n查看穿梭后的日志信息\n明显看到当前指向first version版本。最顶行多出一行日志记录我们进行了版本穿梭。说明版本穿梭也会被Git的日志记录，但版本号不会新增。\n四、Git分支操作 4.1什么是分支 在版本控制过程中，同时推进多个任务，为每廷务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）\n4.2分支的好处 同时并行推进多个功能开发，提高开发效率。\n各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。\n4.3分支的操作 命令名称 作用 git branch 分支名 创建分支 git branch -v 查看分支 git checkout 分支名 切换分支 git merge 分支名 把指定的分支合并到当前分支上 查看分支 1 git branch -v 创建分支 1 git branch 分支名 创建一个名为hot-fix的紧急修复分支。\n创建的新分支，会克隆当前分支的的所有状态和信息，比如：历史版本信息等等。\n切换分支 1 git checkout 分支名 切换成功后会返回切换成功信息，下一个提示符的蓝色括号由原来的master变成了hot-fix。\n同时日志会记录分支切换信息。\n分支修改文件 直接调用vim对最新版本的newfile.md文件进行修改。修改之后的状态与在同一个分支下修改文件相似，这里省略图文介绍，详细参考上文3.8修改文件。之后的步骤是：添加到暂存区、提交到本地库。\n在修改分支提交的版本我们命名为hot-fix first version。\n合并分支 1 git merge 分支名 合并前先把项目的分支切换到需要合并到的分支上**（master)**\n执行合并命令\n冲突合并 产生冲突的原因：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须认为决定新代码的内容。\n模拟冲突合并：\n因为上一步我们刚刚把hot-fix中的 first version合并到mater中来，所以此时mater分支newfile的内容与hot-fix中newfile.md的内容一样。\n我们先把master中的newfile最后一行尾加入master test。再进行添加和提交。版本命名master test。\n再把分支切换到hot-fix，此时内容还未受到master分支的修改而修改。\n这时我们把hot-fix中的newfile的倒数第二行末加上hot-fix test。\n然后添加、提交。版本名为hotfix-version。切换回master分支，执行合并分支。\n此时报错并且当前状态为在master分支上，并且正在合并分支，需要我们人为进入vim选择合并。\n\u0026laquo;\u0026laquo;\u0026laquo; HEAD 与======之间的内容表示是当前mater分支的修改内容。 =======与\u0026raquo;\u0026raquo;\u0026raquo;\u0026gt; hot-fix之间的内容表示hot-fix分支的修改内容。\n我们需要手动修改内容并且删除多余的提示符号。\n上图是人工手动修改合并后的信息，保留了两个处在不同分支的操作者对同一文件的修改。\n保存完文件之后，还要把修改完的文件添加到暂存区以及提交到工作区的一系列操作，注意在手动合并后的提交到本地库的命令中不需要带文件名。\n提交完成后，状态变为master。至此我们通过手动合并分支解决了代码冲突。\n注意：合并分支只会修改合并到分支的文件的内容，从哪合并来的哪个分支通过合并操作不会被修改。\n五、Github远程库操作 5.1配置SSH 设置用户签名\n检查是否存在SSH Key\n1 2 3 4 5 6 ChouS@DESKTOP-78VSLED MINGW64 / $ cd ~/.ssh ChouS@DESKTOP-78VSLED MINGW64 ~/.ssh $ ls id_rsa id_rsa.pub known_hosts known_hosts.old 存在id_rsa.pub和id_rsa说明存在SSH密钥。\n如果没有，则执行生成SSH Key\n1 2 ChouS@DESKTOP-78VSLED MINGW64 ~/.ssh $ ssh -keygen -t rsa -C \u0026#34;邮箱地址\u0026#34; 查看SSH Key\n1 2 3 4 ChouS@DESKTOP-78VSLED MINGW64 ~/.ssh $ cat id_rsa.pub ssh-rsa 以下为密钥内容，此处不做展示。 到Github配置添加密钥\n登陆Github-右上角头像-settings-SSH and GPG keys-add。\n配置好SSH后,在自己的电脑Github会自动与远程库保持通信。\n5.2创建远程仓库 Repository\n公网访问仓库名称为 username.github.io，每个账号只有一个。\n非公网访问仓库名称用户自定义，有很多个供我们使用。\n5.3远程仓库操作 创建远程仓库别名 操作命令 操作名称 git remote -v 查看当前所有远程地址的别名 git remote add 别名 远程地址 设置远程地址的别名 查看远程地址别名有两行，说明这个别名可以用于推送、拉取、克隆等。\n推送本地库代码到远程库 1 git push 别名/远程链接 分支 推送的最小单位是分支，需要指定推送哪一个分支。\n拉取远程库到本地库 1 git pull 别名 分支 当本地库与远程库的项目文件内容不一致时，需要先用Pull拉取到本地，更新本地库与远程库保持一致。\n克隆远程仓库到本地 1 git clone 远程地址 克隆会自动完成：1、拉取代码 2、初始化本地仓库 3、创建别名\n当到一个新环境管理自己的或上级的项目需要克隆到本地以实现初始化和拉取最新代码。\n5.4Github界面介绍 功能名称 作用 Code 展示项目源码，提供源码Clone和打包下载。 Issues 讨论区，可以对项目进行各种提问。我们每个人都可以在本区提出issuse。状态Open：讨论中状态Closed：关闭该帖，已经解决问题。 Pull requests 从Fork的项目发起向原项目合并请求 fork 原项目的拷贝数。 watch 关注项目的变化，如果别人提交了pull、request、发起了issue，在通知中心会收到消息。 star 类似于点赞，表示项目受欢迎度。 branch 分支 tag 标签 5.5Branch与Fork的区别 Fork属于远程托管平台的功能，并不属于Git的branch。\nFork是一个新的仓库，可以随便开分支，只要最后不乱 pull request 乱合并到原项目就不会出事； branch 其实只是一个分支，比一个仓库的范围要小得多，你实际上还是处于同一个项目仓库中。\nPull Request：从Fork过衍生出的新项目向原项目发起合并推送请求。\n5.6顶级域名 申请顶级域名并且指向username.github.io，会使之变为类似www.username.com等高大尚的地址。\n申请渠道 阿里云 腾讯云 GoDaddy freenom 从顶级域名渠道配置指向我们的GitHub地址后，要从GitHub的仓库setting中的Custom domain输入我们购买好的顶级域名，这样顶级域名就配置完成了。\n5.7版本比较 在原项目的网址后面加上\\compare可以访问该项目的版本比较页面，另外也有插件可以使得源码比较起来直观。\n","permalink":"https://chousinbin.github.io/posts/tech/git/","summary":"Git","title":"Git"},{"content":"下载简历 =\u0026gt; CV.PDF\n教育背景 2021 - 2025 大连交通大学 软件工程 必修课平均学分绩: 92.40 排名: 2/129 (前 2%) CET-6: 426 主修课程：数据结构 (99) 计算机网络 (97) 高等数学 (98) 线性代数 (93) 数据库原理与应用 (98) 软件工程 (96) 项目经历 2022.07 - 2022.08，个人博客的搭建与部署\n博客地址：sinbin.me\n利用开源的 Hugo 博客框架和开源主题在 GitPages 上搭建部署了自己的博客网站，并配备了独立域名。\n2022 - 今, 个人电子笔记仓库的维护\n仓库地址： GitHub 个人笔记仓库\n大学以来使用 MarkDown 书写个人学习笔记，涉及本科课程、开发技术、算法竞赛等方面。使用 LaTeX 书写常见数学公式，用 Git 对笔记进行版本控制，笔记托管在 Github 上。至今该仓库 Commit 次数已达 130 余次。\n2023 - 2023, 操作系统：进程调度和页面置换算法的实现\n用 C 语言分别实现了几种常见的进程调度算法和页面置换算法，总共约 800 LOC\n进程调度: 先来先服务，最短剩余优先，时间片轮转，优先级\n页面置换：先入先出，最近最少使用，二次交换\n荣誉奖项 2023 - 大连交通大学校一等优秀学生综合奖学金 (排名: 1/129) 2023 - 大连交通大学校三好学生 2022 - 蓝桥杯 C/C++ 赛道省赛一等奖 2022 - 辽宁省大学生程序设计竞赛三等奖 2024 - 蓝桥杯 C/C++ 赛道省赛一等奖 个人技能 熟悉 C/C++ 和 Java 语言的基本语法，独自开发过 2000 行代码量的程序 了解 Linux 常用命令, 能在 Linux 环境下对项目进行开发和调试 熟悉 Git/GitHub，能对项目进行版本控制, 包括创建远程仓库、代码提交、分支管理、版本回退等操作 熟悉 MarkDown 文档写作，了解 LaTeX 排版工具 兴趣爱好 中长跑、徒步、钓鱼 ","permalink":"https://chousinbin.github.io/about/","summary":"下载简历 =\u0026gt; CV.PDF 教育背景 2021 - 2025 大连交通大学 软件工程 必修课平均学分绩: 92.40 排名: 2/129 (前 2%) CET-6: 426 主修课程：数据结构 (99) 计算机网络 (97) 高等数学 (98) 线性代数 (93) 数据","title":"关于"}]